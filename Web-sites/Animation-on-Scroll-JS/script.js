// Um Array composto por Objetos, chamado "IntersectionObserverEntry" √© o que o navegador manda como primeiro argumento para o a function call back, que por sua vez √© onde o mesmo array ser√° atribuido ao pareametro "entradas" e utilizado a seguir.

const myObserver = new IntersectionObserver((entradas) => {
    console.log(entradas)
    entradas.forEach((entrada) => {
      if (entrada.isIntersecting) {
        entrada.target.classList.remove('hidden');
        entrada.target.classList.add('show');
      } else {
        entrada.target.classList.remove('show');
        entrada.target.classList.add('hidden');
      }
    })
})

const elements = document.querySelectorAll('.hidden');

elements.forEach((element) => myObserver.observe(element));

/*
--
new IntersectionObserver((entradas) => { ... }):

Quando voc√™ cria uma nova inst√¢ncia de IntersectionObserver, voc√™ precisa passar uma fun√ß√£o de callback (aquela com (entradas) => { ... }).

Essa fun√ß√£o de callback n√£o √© chamada imediatamente por voc√™. Em vez disso, ela √© uma fun√ß√£o que voc√™ registra com o navegador.

myObserver.observe(element):

Para cada element que voc√™ quer monitorar (no seu caso, todos os elementos com a classe hidden), voc√™ chama myObserver.observe(element).

Ao fazer isso, voc√™ est√° dizendo ao navegador: "Por favor, myObserver, comece a vigiar este element para mim."

O Papel do Navegador üåê:

O navegador assume a responsabilidade de monitorar a visibilidade de todos os elementos que foram "observados" pelo myObserver.

Sempre que um desses elementos cruza um limite de visibilidade (por exemplo, entra na tela, sai da tela, atinge uma certa porcentagem de visibilidade), o navegador detecta essa mudan√ßa.

Ao detectar essa mudan√ßa, o navegador chama automaticamente a fun√ß√£o de callback que voc√™ definiu (aquela que come√ßa com (entradas) => { ... }).

Quando o navegador chama essa fun√ß√£o, ele passa um array de objetos IntersectionObserverEntry como o primeiro argumento. Esse array √© exatamente o que o seu par√¢metro entradas recebe.

Resumo do Fluxo:
Voc√™ define a fun√ß√£o de callback e diz ao IntersectionObserver quais elementos monitorar. O navegador √© o respons√°vel por:

Detectar as mudan√ßas de visibilidade nos elementos observados.

Chamar a fun√ß√£o de callback automaticamente.

Fornecer o array entradas com as informa√ß√µes detalhadas sobre a intersec√ß√£o no momento da chamada.
--
*/